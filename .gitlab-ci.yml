variables:
  CI_IMAGE:                 registry.gitlab.com/qbau/software-and-apps/ci-dockerfiles/ubuntu_x86-22.04:all_dep_clang-2
  EMULATOR_CI_IMAGE_CLANG:  registry.gitlab.com/qbau/software-and-apps/ci-dockerfiles/ubuntu_x86-22.04:all_dep_cuda-12.1.1_clang-2
  DEV_REGISTRY:             registry.gitlab.com/qbau/software-and-apps/qbsdk
  PUBLIC_REGISTRY:          registry.gitlab.com/qbau/software-and-apps/public/qbsdk
  STAGING_REGISTRY:         $DEV_REGISTRY/staging
  DEV_IMAGE_NAME:           qristal-sdk-dev
  PUBLIC_IMAGE_NAME:        qristal-sdk
  N_PROC_LAMBDA: "16"

  # CORE_TAG specifies the branch to use for image builds e.g. "waseem/universal_dockerfile"
  # CORE_REF specifies the reference to copy artifacts from e.g. "refs/merge-requests/209/head"
  # default is "main"
  CORE_TAG: main
  CORE_REF: main
  DECODER_TAG: main
  INTEGRATIONS_TAG: main

stages:
  - build
  - test
  - prepare_image
  - deploy_image

# Switch between merge request and branch pipelines.
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

.install_core:
  before_script:
    - whoami
    - echo $PWD
    - ls *
    - export ARTEFACTS_DIR=$PWD/../core
    # The state of the runner is persistent outside the working dir, so delete any previous core dirs.
    - rm -rf $ARTEFACTS_DIR $QB_DIR/core
    - mv core_artefacts $ARTEFACTS_DIR
    - cmake --install $ARTEFACTS_DIR/build

ci-build-triggered-from-upstream:
  stage: build
  image: $CI_IMAGE
  extends: .install_core
  tags:
    - x86Docker
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
  needs:
    - project: qbau/software-and-apps/core
      job: ci-build
      ref: $UPSTREAM_REF
      artifacts: true
  script:
    - echo Using core branch $UPSTREAM_REF
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com".insteadOf https://gitlab.com
    - cmake -B build . -Dqristal_core_DIR=${QB_DIR}/core -DCMAKE_INSTALL_PREFIX=$QB_DIR/qristal --preset=dev -DINTEGRATIONS_TAG=$INTEGRATIONS_TAG -DDECODER_TAG=$DECODER_TAG
    - cmake --build build
    - rm -rf $WORK_DIR/core $QB_DIR/core
  artifacts:
    when: always
    paths:
      - build/cmake_install.cmake
      - build/_deps
      - decoder
      - integrations

ci-tests-triggered-from-upstream:
  stage: test
  extends: .install_core
  image: $CI_IMAGE
  tags:
    - x86Docker
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
  needs:
    - "ci-build-triggered-from-upstream"
    - project: qbau/software-and-apps/core
      job: ci-build
      ref: $UPSTREAM_REF
      artifacts: true
  script:
    - echo Using core branch $UPSTREAM_REF
    - cmake --install build
    - cmake -B build_demo1 $QB_DIR/qristal/examples/cpp/demo1
    - cmake --build build_demo1
    - ./build_demo1/demo1
    - cmake -B build_qaoa $QB_DIR/qristal/examples/cpp/qaoa
    - cmake --build build_qaoa
    - ./build_qaoa/qaoa
    - python3 $QB_DIR/qristal/examples/python/demo1.py
    - python3 $QB_DIR/qristal/examples/python/quickstart.py
    - python3 $QB_DIR/qristal/examples/python/vqee_example_1.py
    - rm -rf $WORK_DIR/core $QB_DIR/core $QB_DIR/qristal

ci-build-triggered-locally-tips-of-all-mains:
  stage: build
  image: $CI_IMAGE
  extends: .install_core
  tags:
    - x86Docker
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline"
  needs:
    - project: qbau/software-and-apps/core
      job: ci-build
      ref: $CORE_REF
      artifacts: true
  script:
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com".insteadOf https://gitlab.com
    - cmake -B build . -Dqristal_core_DIR=${QB_DIR}/core -DCMAKE_INSTALL_PREFIX=$QB_DIR/qristal --preset=dev -DINTEGRATIONS_TAG=$INTEGRATIONS_TAG -DDECODER_TAG=$DECODER_TAG
    - cmake --build build
    - rm -rf $WORK_DIR/core $QB_DIR/core
  artifacts:
    when: always
    paths:
      - build/cmake_install.cmake
      - build/_deps
      - decoder
      - integrations

ci-tests-triggered-locally-tips-of-all-mains:
  stage: test
  extends: .install_core
  image: $CI_IMAGE
  tags:
    - x86Docker
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline"
  needs:
    - "ci-build-triggered-locally-tips-of-all-mains"
    - project: qbau/software-and-apps/core
      job: ci-build
      ref: $CORE_REF
      artifacts: true
  script:
    - cmake --install build
    - cmake -B build_demo1 $QB_DIR/qristal/examples/cpp/demo1
    - cmake --build build_demo1
    - ./build_demo1/demo1
    - cmake -B build_qaoa $QB_DIR/qristal/examples/cpp/qaoa
    - cmake --build build_qaoa
    - ./build_qaoa/qaoa
    - python3 $QB_DIR/qristal/examples/python/demo1.py
    - python3 $QB_DIR/qristal/examples/python/quickstart.py
    - python3 $QB_DIR/qristal/examples/python/vqee_example_1.py
    - rm -rf $WORK_DIR/core $QB_DIR/core $QB_DIR/qristal

ci-build-triggered-locally-install-missing:
  stage: build
  image: $CI_IMAGE
  tags:
    - x86Docker
  parallel:
    matrix:
      - QBSDK_PRESET: ["dev", "public"]
  rules:
    # Allow skipping the build step using public core, integrations and decoder repos.
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $QBSDK_PRESET == "public"
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE != "pipeline"
  script:
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com".insteadOf https://gitlab.com
    - cmake -B build . -DINSTALL_MISSING=ON -DCMAKE_INSTALL_PREFIX=$QB_DIR/qristal --preset=$QBSDK_PRESET -DCORE_TAG=$CORE_TAG -DINTEGRATIONS_TAG=$INTEGRATIONS_TAG -DDECODER_TAG=$DECODER_TAG
    - cmake --build build

# - - - - - - - - - - - - - - - - - - - SDK images - - - - - - - - - - - - - - - - - - - #

# Build the SDK images
build-image:
  stage: prepare_image
  tags: ["lambda"]
  needs: []
  parallel:
    matrix:
      - QBSDK_PRESET: ["dev", "public"]
  script:
    # For the final public image built on the main, use the latest tagged commits on all repos, and name the image using the latest SDK tag.
    # For the dev images and the public image deployed to staging from merge requests, use the tips of all mains, and name the image using today's date.
    - export SDK_TAG=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - export CORE_TAG_LOCAL=$CORE_TAG
    - export DECODER_TAG_LOCAL=$DECODER_TAG
    - export INTEGRATIONS_TAG_LOCAL=$INTEGRATIONS_TAG
    - export IM_TAG=$IMAGE:$(date -I)
    - if [ "$CI_PIPELINE_SOURCE" != "merge_request_event" ]; then
    -   if [ $QBSDK_PRESET = "dev" ]; then
    -     export SDK_TAG=$CI_COMMIT_BRANCH
    -   else
    -     export GIT_TAG=$(git describe --tags --abbrev=0)
    -     export SDK_TAG=$GIT_TAG
    -     export CORE_TAG_LOCAL=$GIT_TAG
    -     export DECODER_TAG_LOCAL=$GIT_TAG
    -     export INTEGRATIONS_TAG_LOCAL=$GIT_TAG
    -     export IM_TAG=$IMAGE:$GIT_TAG
    -   fi
    - fi
    # Make the image tag available to the deploy job.
    - echo "IM_TAG=$IM_TAG" >> im_tag.env
    - echo -e "Running job with IM_TAG ${IM_TAG}, QBSDK_PRESET ${QBSDK_PRESET}, CORE_TAG ${CORE_TAG_LOCAL}, SDK_TAG ${SDK_TAG}"
    - df -h
    #- bash utils/checkBump.sh $IM_TAG
    - docker buildx build
      --build-arg SDK_CI_IMAGE=$EMULATOR_CI_IMAGE_CLANG
      --build-arg N_PROC=$N_PROC_LAMBDA
      --build-arg GIT_TOKEN=${CI_JOB_TOKEN}
      --build-arg QBSDK_PRESET=${QBSDK_PRESET}
      --build-arg CORE_TAG=${CORE_TAG_LOCAL}
      --build-arg DECODER_TAG=${DECODER_TAG_LOCAL}
      --build-arg INTEGRATIONS_TAG=${INTEGRATIONS_TAG_LOCAL}
      --build-arg QBSDK_TAG=${SDK_TAG}
      --rm --platform linux/amd64 --progress=plain --target deploy -t $IM_TAG -f docker/Dockerfile .
  rules:
    # Skipping the public image build step is allowed, but not the dev one.
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $QBSDK_PRESET == "dev"
      variables:
        IMAGE: $STAGING_REGISTRY/$DEV_IMAGE_NAME
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_COMMIT_BRANCH == "main" && $QBSDK_PRESET == "dev"
      variables:
        IMAGE: $DEV_REGISTRY/$DEV_IMAGE_NAME
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $QBSDK_PRESET == "public"
      variables:
        IMAGE: $STAGING_REGISTRY/$PUBLIC_IMAGE_NAME
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_COMMIT_BRANCH == "main" && $QBSDK_PRESET == "public"
      variables:
        IMAGE: $PUBLIC_REGISTRY/$PUBLIC_IMAGE_NAME
      when: manual
      allow_failure: true
  artifacts:
    reports:
      dotenv: im_tag.env

# Deploy the development image
deploy-dev-image:
  stage: deploy_image
  needs:
    job: build-image
    parallel:
      matrix:
        - QBSDK_PRESET: "dev"
  tags: ["lambda"]
  script:
    - echo -e "Running job with IM_TAG ${IM_TAG}"
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker push --quiet $IM_TAG
  rules:
    # Skipping the deployment of the dev image is allowed in a merge, but not in the main.
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_COMMIT_BRANCH == "main"

# Deploy the public image
deploy-public-image:
  stage: deploy_image
  # Deploying the public image is always manual
  needs:
    job: build-image
    parallel:
      matrix:
        - QBSDK_PRESET: "public"
  tags: ["lambda"]
  script:
    - echo -e "Running job with IM_TAG ${IM_TAG}"
    - echo $GL_TOKEN | docker login -u $GL_USER $GL_REGISTRY --password-stdin
    # Forbid overwriting already published public images
    - if [ "$CI_PIPELINE_SOURCE" != "merge_request_event" ]; then
    -   docker manifest inspect ${IM_TAG} > /dev/null && echo Attempt to overwrite deployed public image ${IM_TAG}! && exit 1
    - fi
    - docker push --quiet $IM_TAG
    # Now that we've successfully uploaded a new tagged image, overwrite the "latest" tag.
    - docker tag $IM_TAG $LATEST_TAG
    - docker push --quiet $LATEST_TAG
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        GL_USER: $CI_REGISTRY_USER
        GL_TOKEN: $CI_REGISTRY_PASSWORD
        GL_REGISTRY: $CI_REGISTRY
        LATEST_TAG: $STAGING_REGISTRY/$PUBLIC_IMAGE_NAME:latest
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_COMMIT_BRANCH == "main"
      variables:
        GL_USER: $SDK_IMAGE_DEPLOYER_USERNAME
        GL_TOKEN: $SDK_IMAGE_DEPLOYER_TOKEN
        GL_REGISTRY: https://$PUBLIC_REGISTRY
        LATEST_TAG: $PUBLIC_REGISTRY/$PUBLIC_IMAGE_NAME:latest
      when: manual
      allow_failure: true
